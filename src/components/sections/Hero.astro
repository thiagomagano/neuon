---
const headlines = [
  "Especialistas em otimizar operações e maximizar lucros através do seu ERP.",
  "Simplifique processos. Amplifique resultados. ",
  "Criando hoje as tecnologias que vão impulsionar o seu amanhã.",
];

const ctaButton = {
  text: "Fale com um especialista",
  url: "#Contato",
};
---

<section
  id="Hero"
  class="relative h-[730px] md:h-[830px] w-full overflow-hidden">
  <div class="relative h-full w-full">
    {/* Slide 1 */}
    <div
      class="hero-slide bg-azul slide-1 absolute top-0 left-0 w-full h-full opacity-0 transition-opacity duration-500 ease-in-out bg-cover bg-no-repeat"
      style="background-image: url('/images/hero-1.png')">
      <div class="relative h-full w-full max-w-7xl mx-auto z-10">
        <div class="relative z-10 pl-8 pt-20 md:pt-32 space-y-8">
          <h1 class="text-4xl md:text-5xl max-w-xl text-white leading-tight">
            {headlines[0]}
          </h1>
          <a
            href={ctaButton.url}
            class="inline-block bg-laranja text-white py-3 px-6 font-medium transition-all hover:scale-105 duration-300 ease-in-out">
            {ctaButton.text}
          </a>
        </div>
      </div>
    </div>

    {/* Slide 2 */}
    <div
      class="hero-slide slide-2 absolute top-0 left-0 w-full h-full opacity-0 transition-opacity duration-500 ease-in-out bg-azul-escuro overflow-hidden">
      <div
        class="gold-line-top absolute md:w-[250%] h-[2px] bg-laranja top-[30%] -left-1/2 rotate-[135deg]">
      </div>
      <div
        class="gold-line-bottom absolute md:w-[150%] h-[2px] bg-laranja top-[18%] -right-1/2 -rotate-[135deg]">
      </div>

      <div class="relative h-full w-full max-w-7xl mx-auto z-10">
        <div
          class="relative z-10 container pt-20 md:pt-32 grid gmd:rid-cols-2 min-h-[65svh]">
          <div class="flex flex-col gap-4">
            <h1 class="text-5xl max-w-xl text-white leading-tight">
              {headlines[1]}
            </h1>
            <p class="text-2xl text-white mb-10 max-w-md">
              Neuon. Conectando negócios à tecnologia.
            </p>
            <div>
              <a
                href={ctaButton.url}
                class="inline-block bg-laranja text-white py-3 px-6 font-medium transition-all hover:scale-105 duration-300 ease-in-out">
                {ctaButton.text}
              </a>
            </div>
          </div>

          <div class="mt-16 flex gap-8 pt-4 self-end place-self-end">
            <div>
              <img
                src="/images/icons/pc.svg"
                alt="Icone Tecnologia"
                class="w-10 h-10 opacity-90"
              />
            </div>
            <div>
              <img
                src="/images/icons/wifi.svg"
                alt="Icone Conectividade"
                class="w-10 h-10 opacity-90"
              />
            </div>
            <div>
              <img
                src="/images/icons/ideia.svg"
                alt="Icone Lampada"
                class="w-10 h-10 opacity-90"
              />
            </div>
          </div>
        </div>
      </div>
    </div>

    {/* Slide 3 */}
    <div
      class="hero-slide slide-3 absolute top-0 left-0 w-full h-full opacity-0 transition-opacity duration-500 ease-in-out bg-azul text overflow-hidden bg-cover bg-no-repeat bg-top-left md:bg-center"
      style="background-image: url('/images/hero-dash-edit.png')">
      <div class="relative h-full container w-full max-w-7xl mx-auto z-10">
        <div
          class="relative z-10 pt-20 md:pt-32 grid grid-cols-1 md:grid-cols-2 gap-8 h-full px-4 md:px-0 2xl:pt-24">
          <div class="space-y-8 text-center md:text-left">
            <h1
              class="text-3xl md:text-4xl max-w-xs text-white leading-tight mx-auto md:mx-0 3xl:max-w-[200px]">
              {headlines[2]}
            </h1>
            <a
              href={ctaButton.url}
              class="inline-block bg-laranja text-white py-3 px-6 font-medium transition-all hover:scale-105 duration-300 ease-in-out">
              {ctaButton.text}
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>

  {/* Navigation Dots */}
  <div class="absolute bottom-8 left-0 right-0 flex justify-center gap-2 z-10">
    <button
      class="dot w-3 h-3 rounded-full bg-white/50 border-none cursor-pointer transition-colors duration-300"
      aria-label="Slide 1"
      data-slide="0"></button>
    <button
      class="dot w-3 h-3 rounded-full bg-white/50 border-none cursor-pointer transition-colors duration-300"
      aria-label="Slide 2"
      data-slide="1"></button>
    <button
      class="dot w-3 h-3 rounded-full bg-white/50 border-none cursor-pointer transition-colors duration-300"
      aria-label="Slide 3"
      data-slide="2"></button>
  </div>
</section>

<style>
  .hero-slide.active {
    opacity: 1;
    z-index: 2;
  }

  .dot.active {
    background-color: white;
  }

  section-slide-left {
    opacity: 0;
    transform: translateX(60px);
    transition:
      opacity 0.7s cubic-bezier(0.4, 0, 0.2, 1),
      transform 0.7s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .section-slide-left.visible {
    opacity: 1;
    transform: translateX(0);
  }
</style>

<script>
  // Slider functionality
  document.addEventListener("DOMContentLoaded", () => {
    const slides = document.querySelectorAll(".hero-slide");
    const dots = document.querySelectorAll(".dot");
    let currentSlide = 0;

    // Check if slides exist before proceeding
    if (slides.length === 0 || dots.length === 0) {
      console.warn("Hero slider elements not found.");
      return;
    }

    // Set initial active slide
    slides[0].classList.add("active");
    dots[0].classList.add("active");

    // Function to change slide
    function goToSlide(index: number) {
      // Ensure index is within bounds
      if (index < 0 || index >= slides.length) {
        console.error("Invalid slide index:", index);
        return;
      }

      // Remove active class from all slides and dots
      slides.forEach((slide) => slide.classList.remove("active"));
      dots.forEach((dot) => dot.classList.remove("active"));

      // Add active class to current slide and dot
      slides[index].classList.add("active");
      dots[index].classList.add("active");

      currentSlide = index;
    }

    // Add click event to dots
    dots.forEach((dot, index) => {
      // Ensure the element is a button before adding listener
      if (dot instanceof HTMLButtonElement) {
        dot.addEventListener("click", () => {
          goToSlide(index);
        });
      }
    });

    // Auto-advance slides
    const intervalId = setInterval(() => {
      // Check if slides still exist (e.g., page navigation)
      if (document.querySelectorAll(".hero-slide").length !== slides.length) {
        clearInterval(intervalId);
        return;
      }
      const nextSlide = (currentSlide + 1) % slides.length;
      goToSlide(nextSlide);
    }, 10000);

    // Optional: Clear interval on page unload to prevent potential memory leaks
    window.addEventListener("beforeunload", () => {
      clearInterval(intervalId);
    });
  });
</script>
